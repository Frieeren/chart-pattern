/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Chart Pattern API
 * Ï∞®Ìä∏ Ìå®ÌÑ¥ Îß§Ïπ≠ÏùÑ ÏúÑÌïú API ÏÑúÎ≤Ñ
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';

import type { ChartSimilarityList, HTTPValidationError } from '../../models';

import { httpClient } from '../../http';

/**
 * Ïã¨Î≥ºÎ≥Ñ ÏµúÏã† Ï∞®Ìä∏ Ïú†ÏÇ¨ÎèÑ Í≤∞Í≥º Î¶¨Ïä§Ìä∏Î•º Î∞òÌôòÌï©ÎãàÎã§.
 * @summary Ï∞®Ìä∏ Ïú†ÏÇ¨ÎèÑ Í≤∞Í≥º Ï°∞Ìöå
 */
export const chartSimilarityLatest = (symbol: string, signal?: AbortSignal) => {
  return httpClient<ChartSimilarityList>({ url: `api/v1/chart-similarity/${symbol}`, method: 'GET', signal });
};

export const getChartSimilarityLatestQueryKey = (symbol: string) => {
  return [`api/v1/chart-similarity/${symbol}`] as const;
};

export const getChartSimilarityLatestInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof chartSimilarityLatest>>>,
  TError = HTTPValidationError,
>(
  symbol: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof chartSimilarityLatest>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getChartSimilarityLatestQueryKey(symbol);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof chartSimilarityLatest>>> = ({ signal }) =>
    chartSimilarityLatest(symbol, signal);

  return { queryKey, queryFn, enabled: !!symbol, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof chartSimilarityLatest>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ChartSimilarityLatestInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof chartSimilarityLatest>>>;
export type ChartSimilarityLatestInfiniteQueryError = HTTPValidationError;

export function useChartSimilarityLatestInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof chartSimilarityLatest>>>,
  TError = HTTPValidationError,
>(
  symbol: string,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof chartSimilarityLatest>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof chartSimilarityLatest>>,
          TError,
          Awaited<ReturnType<typeof chartSimilarityLatest>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useChartSimilarityLatestInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof chartSimilarityLatest>>>,
  TError = HTTPValidationError,
>(
  symbol: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof chartSimilarityLatest>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof chartSimilarityLatest>>,
          TError,
          Awaited<ReturnType<typeof chartSimilarityLatest>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useChartSimilarityLatestInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof chartSimilarityLatest>>>,
  TError = HTTPValidationError,
>(
  symbol: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof chartSimilarityLatest>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Ï∞®Ìä∏ Ïú†ÏÇ¨ÎèÑ Í≤∞Í≥º Ï°∞Ìöå
 */

export function useChartSimilarityLatestInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof chartSimilarityLatest>>>,
  TError = HTTPValidationError,
>(
  symbol: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof chartSimilarityLatest>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getChartSimilarityLatestInfiniteQueryOptions(symbol, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getChartSimilarityLatestQueryOptions = <
  TData = Awaited<ReturnType<typeof chartSimilarityLatest>>,
  TError = HTTPValidationError,
>(
  symbol: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof chartSimilarityLatest>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getChartSimilarityLatestQueryKey(symbol);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof chartSimilarityLatest>>> = ({ signal }) =>
    chartSimilarityLatest(symbol, signal);

  return { queryKey, queryFn, enabled: !!symbol, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof chartSimilarityLatest>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ChartSimilarityLatestQueryResult = NonNullable<Awaited<ReturnType<typeof chartSimilarityLatest>>>;
export type ChartSimilarityLatestQueryError = HTTPValidationError;

export function useChartSimilarityLatest<
  TData = Awaited<ReturnType<typeof chartSimilarityLatest>>,
  TError = HTTPValidationError,
>(
  symbol: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof chartSimilarityLatest>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof chartSimilarityLatest>>,
          TError,
          Awaited<ReturnType<typeof chartSimilarityLatest>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useChartSimilarityLatest<
  TData = Awaited<ReturnType<typeof chartSimilarityLatest>>,
  TError = HTTPValidationError,
>(
  symbol: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof chartSimilarityLatest>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof chartSimilarityLatest>>,
          TError,
          Awaited<ReturnType<typeof chartSimilarityLatest>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useChartSimilarityLatest<
  TData = Awaited<ReturnType<typeof chartSimilarityLatest>>,
  TError = HTTPValidationError,
>(
  symbol: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof chartSimilarityLatest>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Ï∞®Ìä∏ Ïú†ÏÇ¨ÎèÑ Í≤∞Í≥º Ï°∞Ìöå
 */

export function useChartSimilarityLatest<
  TData = Awaited<ReturnType<typeof chartSimilarityLatest>>,
  TError = HTTPValidationError,
>(
  symbol: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof chartSimilarityLatest>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getChartSimilarityLatestQueryOptions(symbol, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getChartSimilarityLatestSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof chartSimilarityLatest>>,
  TError = HTTPValidationError,
>(
  symbol: string,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof chartSimilarityLatest>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getChartSimilarityLatestQueryKey(symbol);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof chartSimilarityLatest>>> = ({ signal }) =>
    chartSimilarityLatest(symbol, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof chartSimilarityLatest>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ChartSimilarityLatestSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof chartSimilarityLatest>>>;
export type ChartSimilarityLatestSuspenseQueryError = HTTPValidationError;

export function useChartSimilarityLatestSuspense<
  TData = Awaited<ReturnType<typeof chartSimilarityLatest>>,
  TError = HTTPValidationError,
>(
  symbol: string,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof chartSimilarityLatest>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useChartSimilarityLatestSuspense<
  TData = Awaited<ReturnType<typeof chartSimilarityLatest>>,
  TError = HTTPValidationError,
>(
  symbol: string,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof chartSimilarityLatest>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useChartSimilarityLatestSuspense<
  TData = Awaited<ReturnType<typeof chartSimilarityLatest>>,
  TError = HTTPValidationError,
>(
  symbol: string,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof chartSimilarityLatest>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Ï∞®Ìä∏ Ïú†ÏÇ¨ÎèÑ Í≤∞Í≥º Ï°∞Ìöå
 */

export function useChartSimilarityLatestSuspense<
  TData = Awaited<ReturnType<typeof chartSimilarityLatest>>,
  TError = HTTPValidationError,
>(
  symbol: string,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof chartSimilarityLatest>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getChartSimilarityLatestSuspenseQueryOptions(symbol, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
