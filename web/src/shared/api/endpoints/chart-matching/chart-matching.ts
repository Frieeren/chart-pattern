/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from '@tanstack/react-query';
import type { MutationFunction, QueryClient, UseMutationOptions, UseMutationResult } from '@tanstack/react-query';

import type { ChartMatchingRequest, ChartMatchingResponse, HTTPValidationError } from '../../models';

import { httpClient } from '../../http';
import type { ErrorType } from '../../http';

/**
 * 주어진 기간 동안의 차트 패턴과 유사한 패턴을 찾아 반환합니다.
 * @summary 차트 패턴 매칭 리스트 조회
 */
export const chartMatchingListApiV1ChartMatchingListPost = (
  chartMatchingRequest: ChartMatchingRequest,
  signal?: AbortSignal
) => {
  return httpClient<ChartMatchingResponse[]>({
    url: 'http://localhost:8000/api/v1/chart_matching_list',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: chartMatchingRequest,
    signal,
  });
};

export const getChartMatchingListApiV1ChartMatchingListPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chartMatchingListApiV1ChartMatchingListPost>>,
    TError,
    { data: ChartMatchingRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof chartMatchingListApiV1ChartMatchingListPost>>,
  TError,
  { data: ChartMatchingRequest },
  TContext
> => {
  const mutationKey = ['chartMatchingListApiV1ChartMatchingListPost'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chartMatchingListApiV1ChartMatchingListPost>>,
    { data: ChartMatchingRequest }
  > = props => {
    const { data } = props ?? {};

    return chartMatchingListApiV1ChartMatchingListPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChartMatchingListApiV1ChartMatchingListPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof chartMatchingListApiV1ChartMatchingListPost>>
>;
export type ChartMatchingListApiV1ChartMatchingListPostMutationBody = ChartMatchingRequest;
export type ChartMatchingListApiV1ChartMatchingListPostMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary 차트 패턴 매칭 리스트 조회
 */
export const useChartMatchingListApiV1ChartMatchingListPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof chartMatchingListApiV1ChartMatchingListPost>>,
      TError,
      { data: ChartMatchingRequest },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof chartMatchingListApiV1ChartMatchingListPost>>,
  TError,
  { data: ChartMatchingRequest },
  TContext
> => {
  const mutationOptions = getChartMatchingListApiV1ChartMatchingListPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
