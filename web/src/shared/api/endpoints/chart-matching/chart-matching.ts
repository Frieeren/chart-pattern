/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from '@tanstack/react-query';
import type { MutationFunction, QueryClient, UseMutationOptions, UseMutationResult } from '@tanstack/react-query';

import type { ChartMatchingRequest, ChartMatchingResponse, HTTPValidationError } from '../../models';

import { http } from '../../http';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Ï£ºÏñ¥ÏßÑ Í∏∞Í∞Ñ ÎèôÏïàÏùò Ï∞®Ìä∏ Ìå®ÌÑ¥Í≥º Ïú†ÏÇ¨Ìïú Ìå®ÌÑ¥ÏùÑ Ï∞æÏïÑ Î∞òÌôòÌï©ÎãàÎã§.
 * @summary Ï∞®Ìä∏ Ìå®ÌÑ¥ Îß§Ïπ≠ Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */
export type chartMatchingListApiV1ChartMatchingListPostResponse200 = {
  data: ChartMatchingResponse[];
  status: 200;
};

export type chartMatchingListApiV1ChartMatchingListPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type chartMatchingListApiV1ChartMatchingListPostResponseComposite =
  | chartMatchingListApiV1ChartMatchingListPostResponse200
  | chartMatchingListApiV1ChartMatchingListPostResponse422;

export type chartMatchingListApiV1ChartMatchingListPostResponse =
  chartMatchingListApiV1ChartMatchingListPostResponseComposite & {
    headers: Headers;
  };

export const getChartMatchingListApiV1ChartMatchingListPostUrl = () => {
  return 'http://localhost:8000/api/v1/chart_matching_list';
};

export const chartMatchingListApiV1ChartMatchingListPost = async (
  chartMatchingRequest: ChartMatchingRequest,
  options?: RequestInit
): Promise<chartMatchingListApiV1ChartMatchingListPostResponse> => {
  return http<chartMatchingListApiV1ChartMatchingListPostResponse>(
    getChartMatchingListApiV1ChartMatchingListPostUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(chartMatchingRequest),
    }
  );
};

export const getChartMatchingListApiV1ChartMatchingListPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chartMatchingListApiV1ChartMatchingListPost>>,
    TError,
    { data: ChartMatchingRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof chartMatchingListApiV1ChartMatchingListPost>>,
  TError,
  { data: ChartMatchingRequest },
  TContext
> => {
  const mutationKey = ['chartMatchingListApiV1ChartMatchingListPost'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chartMatchingListApiV1ChartMatchingListPost>>,
    { data: ChartMatchingRequest }
  > = props => {
    const { data } = props ?? {};

    return chartMatchingListApiV1ChartMatchingListPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChartMatchingListApiV1ChartMatchingListPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof chartMatchingListApiV1ChartMatchingListPost>>
>;
export type ChartMatchingListApiV1ChartMatchingListPostMutationBody = ChartMatchingRequest;
export type ChartMatchingListApiV1ChartMatchingListPostMutationError = HTTPValidationError;

/**
 * @summary Ï∞®Ìä∏ Ìå®ÌÑ¥ Îß§Ïπ≠ Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */
export const useChartMatchingListApiV1ChartMatchingListPost = <TError = HTTPValidationError, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof chartMatchingListApiV1ChartMatchingListPost>>,
      TError,
      { data: ChartMatchingRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof chartMatchingListApiV1ChartMatchingListPost>>,
  TError,
  { data: ChartMatchingRequest },
  TContext
> => {
  const mutationOptions = getChartMatchingListApiV1ChartMatchingListPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
