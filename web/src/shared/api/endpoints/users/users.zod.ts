/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Chart Pattern API
 * 차트 패턴 매칭을 위한 API 서버
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from 'zod';

/**
 * 모든 사용자 목록을 조회합니다.
 * @summary Read Users
 */
export const readUsersUsersGetQuerySkipDefault = 0;
export const readUsersUsersGetQueryLimitDefault = 100;

export const readUsersUsersGetQueryParams = zod.object({
  skip: zod.number().optional(),
  limit: zod.number().default(readUsersUsersGetQueryLimitDefault),
});

export const readUsersUsersGetResponseItem = zod.object({
  created_at: zod.string().datetime({}),
  email: zod.string().email(),
  id: zod.number(),
  username: zod.string(),
});
export const readUsersUsersGetResponse = zod.array(readUsersUsersGetResponseItem);

/**
 * 새로운 사용자를 생성합니다.
 * @summary Create User
 */
export const createUserUsersPostBody = zod.object({
  email: zod.string().email(),
  username: zod.string(),
});

export const createUserUsersPostResponse = zod.object({
  created_at: zod.string().datetime({}),
  email: zod.string().email(),
  id: zod.number(),
  username: zod.string(),
});

/**
 * 특정 ID의 사용자 정보를 조회합니다.
 * @summary Read User
 */
export const readUserUsersUserIdGetParams = zod.object({
  user_id: zod.number(),
});

export const readUserUsersUserIdGetResponse = zod.object({
  created_at: zod.string().datetime({}),
  email: zod.string().email(),
  id: zod.number(),
  username: zod.string(),
});
