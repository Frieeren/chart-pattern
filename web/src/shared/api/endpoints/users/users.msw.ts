/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Chart Pattern API
 * 차트 패턴 매칭을 위한 API 서버
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type { UserResponse } from '../../models';

export const getReadUsersUsersGetResponseMock = (): UserResponse[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    created_at: `${faker.date.past().toISOString().split('.')[0]}Z`,
    email: faker.internet.email(),
    id: faker.number.int({ min: undefined, max: undefined }),
    username: faker.string.alpha(20),
  }));

export const getCreateUserUsersPostResponseMock = (overrideResponse: Partial<UserResponse> = {}): UserResponse => ({
  created_at: `${faker.date.past().toISOString().split('.')[0]}Z`,
  email: faker.internet.email(),
  id: faker.number.int({ min: undefined, max: undefined }),
  username: faker.string.alpha(20),
  ...overrideResponse,
});

export const getReadUserUsersUserIdGetResponseMock = (overrideResponse: Partial<UserResponse> = {}): UserResponse => ({
  created_at: `${faker.date.past().toISOString().split('.')[0]}Z`,
  email: faker.internet.email(),
  id: faker.number.int({ min: undefined, max: undefined }),
  username: faker.string.alpha(20),
  ...overrideResponse,
});

export const getReadUsersUsersGetMockHandler = (
  overrideResponse?:
    | UserResponse[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserResponse[]> | UserResponse[])
) => {
  return http.get('*/users/', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getReadUsersUsersGetResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getCreateUserUsersPostMockHandler = (
  overrideResponse?:
    | UserResponse
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UserResponse> | UserResponse)
) => {
  return http.post('*/users/', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateUserUsersPostResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getReadUserUsersUserIdGetMockHandler = (
  overrideResponse?:
    | UserResponse
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserResponse> | UserResponse)
) => {
  return http.get('*/users/:userId', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getReadUserUsersUserIdGetResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};
export const getUsersMock = () => [
  getReadUsersUsersGetMockHandler(),
  getCreateUserUsersPostMockHandler(),
  getReadUserUsersUserIdGetMockHandler(),
];
