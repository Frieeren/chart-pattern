/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Chart Pattern API
 * 차트 패턴 매칭을 위한 API 서버
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';

import type { HTTPValidationError, ReadUsersUsersGetParams, UserCreate, UserResponse } from '../../models';

import { httpClient } from '../../http';
import type { ErrorType } from '../../http';

/**
 * 모든 사용자 목록을 조회합니다.
 * @summary Read Users
 */
export const readUsersUsersGet = (params?: ReadUsersUsersGetParams, signal?: AbortSignal) => {
  return httpClient<UserResponse[]>({ url: 'api/users/', method: 'GET', params, signal });
};

export const getReadUsersUsersGetQueryKey = (params?: ReadUsersUsersGetParams) => {
  return ['api/users/', ...(params ? [params] : [])] as const;
};

export const getReadUsersUsersGetInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof readUsersUsersGet>>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: ReadUsersUsersGetParams,
  options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReadUsersUsersGetQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof readUsersUsersGet>>> = ({ signal }) =>
    readUsersUsersGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof readUsersUsersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadUsersUsersGetInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof readUsersUsersGet>>>;
export type ReadUsersUsersGetInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useReadUsersUsersGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof readUsersUsersGet>>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: undefined | ReadUsersUsersGetParams,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUsersUsersGet>>,
          TError,
          Awaited<ReturnType<typeof readUsersUsersGet>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReadUsersUsersGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof readUsersUsersGet>>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: ReadUsersUsersGetParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUsersUsersGet>>,
          TError,
          Awaited<ReturnType<typeof readUsersUsersGet>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReadUsersUsersGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof readUsersUsersGet>>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: ReadUsersUsersGetParams,
  options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Read Users
 */

export function useReadUsersUsersGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof readUsersUsersGet>>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: ReadUsersUsersGetParams,
  options?: { query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getReadUsersUsersGetInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getReadUsersUsersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof readUsersUsersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: ReadUsersUsersGetParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReadUsersUsersGetQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof readUsersUsersGet>>> = ({ signal }) =>
    readUsersUsersGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof readUsersUsersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadUsersUsersGetQueryResult = NonNullable<Awaited<ReturnType<typeof readUsersUsersGet>>>;
export type ReadUsersUsersGetQueryError = ErrorType<HTTPValidationError>;

export function useReadUsersUsersGet<
  TData = Awaited<ReturnType<typeof readUsersUsersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: undefined | ReadUsersUsersGetParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUsersUsersGet>>,
          TError,
          Awaited<ReturnType<typeof readUsersUsersGet>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReadUsersUsersGet<
  TData = Awaited<ReturnType<typeof readUsersUsersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: ReadUsersUsersGetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUsersUsersGet>>,
          TError,
          Awaited<ReturnType<typeof readUsersUsersGet>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReadUsersUsersGet<
  TData = Awaited<ReturnType<typeof readUsersUsersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: ReadUsersUsersGetParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Read Users
 */

export function useReadUsersUsersGet<
  TData = Awaited<ReturnType<typeof readUsersUsersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: ReadUsersUsersGetParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getReadUsersUsersGetQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getReadUsersUsersGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof readUsersUsersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: ReadUsersUsersGetParams,
  options?: { query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReadUsersUsersGetQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof readUsersUsersGet>>> = ({ signal }) =>
    readUsersUsersGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof readUsersUsersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadUsersUsersGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof readUsersUsersGet>>>;
export type ReadUsersUsersGetSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useReadUsersUsersGetSuspense<
  TData = Awaited<ReturnType<typeof readUsersUsersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: undefined | ReadUsersUsersGetParams,
  options: { query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReadUsersUsersGetSuspense<
  TData = Awaited<ReturnType<typeof readUsersUsersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: ReadUsersUsersGetParams,
  options?: { query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReadUsersUsersGetSuspense<
  TData = Awaited<ReturnType<typeof readUsersUsersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: ReadUsersUsersGetParams,
  options?: { query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Read Users
 */

export function useReadUsersUsersGetSuspense<
  TData = Awaited<ReturnType<typeof readUsersUsersGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params?: ReadUsersUsersGetParams,
  options?: { query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getReadUsersUsersGetSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 새로운 사용자를 생성합니다.
 * @summary Create User
 */
export const createUserUsersPost = (userCreate: UserCreate, signal?: AbortSignal) => {
  return httpClient<UserResponse>({
    url: 'api/users/',
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: userCreate,
    signal,
  });
};

export const getCreateUserUsersPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUserUsersPost>>,
    TError,
    { data: UserCreate },
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof createUserUsersPost>>, TError, { data: UserCreate }, TContext> => {
  const mutationKey = ['createUserUsersPost'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUserUsersPost>>, { data: UserCreate }> = props => {
    const { data } = props ?? {};

    return createUserUsersPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserUsersPostMutationResult = NonNullable<Awaited<ReturnType<typeof createUserUsersPost>>>;
export type CreateUserUsersPostMutationBody = UserCreate;
export type CreateUserUsersPostMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Create User
 */
export const useCreateUserUsersPost = <TError = ErrorType<HTTPValidationError>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createUserUsersPost>>,
      TError,
      { data: UserCreate },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof createUserUsersPost>>, TError, { data: UserCreate }, TContext> => {
  const mutationOptions = getCreateUserUsersPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 특정 ID의 사용자 정보를 조회합니다.
 * @summary Read User
 */
export const readUserUsersUserIdGet = (userId: number, signal?: AbortSignal) => {
  return httpClient<UserResponse>({ url: `api/users/${userId}`, method: 'GET', signal });
};

export const getReadUserUsersUserIdGetQueryKey = (userId: number) => {
  return [`api/users/${userId}`] as const;
};

export const getReadUserUsersUserIdGetInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof readUserUsersUserIdGet>>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: number,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReadUserUsersUserIdGetQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof readUserUsersUserIdGet>>> = ({ signal }) =>
    readUserUsersUserIdGet(userId, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadUserUsersUserIdGetInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof readUserUsersUserIdGet>>>;
export type ReadUserUsersUserIdGetInfiniteQueryError = ErrorType<HTTPValidationError>;

export function useReadUserUsersUserIdGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof readUserUsersUserIdGet>>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: number,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof readUserUsersUserIdGet>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReadUserUsersUserIdGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof readUserUsersUserIdGet>>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: number,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof readUserUsersUserIdGet>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReadUserUsersUserIdGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof readUserUsersUserIdGet>>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: number,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Read User
 */

export function useReadUserUsersUserIdGetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof readUserUsersUserIdGet>>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: number,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getReadUserUsersUserIdGetInfiniteQueryOptions(userId, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getReadUserUsersUserIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReadUserUsersUserIdGetQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof readUserUsersUserIdGet>>> = ({ signal }) =>
    readUserUsersUserIdGet(userId, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadUserUsersUserIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readUserUsersUserIdGet>>>;
export type ReadUserUsersUserIdGetQueryError = ErrorType<HTTPValidationError>;

export function useReadUserUsersUserIdGet<
  TData = Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof readUserUsersUserIdGet>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReadUserUsersUserIdGet<
  TData = Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof readUserUsersUserIdGet>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReadUserUsersUserIdGet<
  TData = Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Read User
 */

export function useReadUserUsersUserIdGet<
  TData = Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getReadUserUsersUserIdGetQueryOptions(userId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getReadUserUsersUserIdGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: number,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReadUserUsersUserIdGetQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof readUserUsersUserIdGet>>> = ({ signal }) =>
    readUserUsersUserIdGet(userId, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ReadUserUsersUserIdGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof readUserUsersUserIdGet>>>;
export type ReadUserUsersUserIdGetSuspenseQueryError = ErrorType<HTTPValidationError>;

export function useReadUserUsersUserIdGetSuspense<
  TData = Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: number,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReadUserUsersUserIdGetSuspense<
  TData = Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: number,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useReadUserUsersUserIdGetSuspense<
  TData = Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: number,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Read User
 */

export function useReadUserUsersUserIdGetSuspense<
  TData = Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: number,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getReadUserUsersUserIdGetSuspenseQueryOptions(userId, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
